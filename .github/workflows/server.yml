name: Clojure Server CI

defaults:
  run:
    working-directory: alko-similar-server

on:
  push:
    branches:
      - main
    paths:
      - alko-similar-server/**
  pull_request:
    branches: [main]
    types: [opened, synchronize]
    paths:
      - alko-similar-server/**

jobs:
  lint-and-test:
    name: Lint & test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

      # It is important to install java before installing clojure tools which needs java
      # exclusions: babashka, clj-kondo and cljstyle
    - name: Prepare java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: Setup Clojure tools
      uses: DeLaGuardo/setup-clojure@10.1
      with:
          # Install just one or all simultaneously
          # The value must indicate a particular version of the tool, or use 'latest'
          # to always provision the latest version
          lein: 'latest'                  # Leiningen
          clj-kondo: 'latest'             # Clj-kondo

    - name: Run linter
      run: clj-kondo --lint src

    - name: Install dependencies
      run: lein deps

    - name: Run tests
      run: lein test

  build:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: lint-and-test
    # Only run on main branch, not on pull requests
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:alko-similar-server"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: essijukkala/alko-similar:server
  deploy:
    name: Deploy docker images
    runs-on: ubuntu-latest
    needs: build
    # Only run on main branch, not on pull requests
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 'Update docker-compose.yml'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~"
      - name: 'Update nginx.conf'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
          source: "nginx-conf/nginx.conf"
          target: "~/nginx-conf"
      - name: 'Update schema.sql'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
          source: "alko-similar-server/resources/schema.sql"
          target: "~"
      - name: 'Stop old server, pull new image, start server again'
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DB }}
          JDBC_DATABASE_URL: jdbc:postgresql://db:5432/${{ secrets.PG_DB }}?user=${{ secrets.PG_USER }}&password=${{ secrets.PG_PASSWORD }}
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,JDBC_DATABASE_URL
          script: |
            export POSTGRES_USER=$POSTGRES_USER
            export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            export POSTGRES_DB=$POSTGRES_DB 
            export JDBC_DATABASE_URL=$JDBC_DATABASE_URL
            docker compose down
            docker compose pull
            docker compose up -d
  health-check:
    runs-on: ubuntu-latest
    name: Health check
    needs: deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Sleep for 60 seconds
      run: sleep 60s
      shell: bash
    - name: Health Check
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: jtalk/url-health-check-action@v3
      with:
        # Check the following URLs one by one sequentially
        url: https://${{ secrets.INSTANCE_IP }}/api/health
        # Fail this action after this many failed attempts
        max-attempts: 3 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 10s # Optional, only applicable to max-attempts > 1